package com.commonsorts;

// 插入排序
public class InsertSort {
    public void insertSort(int[] a){
            int length = a.length; //数组长度，将这个提取出来是为了提高速度。
            int insertNum; //代表要插入的插入数

            for(int i = 1; i < length; i++){ //插入的次数
                insertNum = a[i]; //要插入的插入数
                int j = i - 1; //已经排序好的序列元素个数（0-j都是接下来while循环里的对比数，0-j可称为对比数序列）

                while(j >= 0 && a[j] > insertNum){ //对比数序列从后到前循环（循环到没有剩余对比数或循环到的对比数小于插入数则终止循环）
                    //（进入while说明还有对比数且该数大于插入数）
                    a[j+1] = a[j]; //将大于插入数的对比数向后移动一格
                    j--; //下一次对比的位置向前移一位
                }
                a[j+1] = insertNum; //将需要插入的数放在要插入的位置。(j为-1则意味着把插入数插入数组头位0位，j不为-1则意味把插入数插入对比序列最大且小于插入数的对比数的后一位)
            }
    }
}



/*
原理解释：
直接插入排序

经常碰到这样一类排序问题：把新的数据插入到已经排好的数据列中。
1.将第一个数和第二个数排序，然后构成一个有序序列
2.将第三个数插入进去，构成一个新的有序序列。
3.对第四个数、第五个数……直到最后一个数，重复第二步。

如何写写成代码：

1.首先设定插入次数，即循环次数，for(int i=1;i<length;i++)，1个数的那次不用插入。
2.设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。
3.从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。
4.将当前数放置到空着的位置，即j+1。
*/



/* ???
想想上面的步骤3和4能不能通过swap函数合二为一？如果C++使用swap的话需要'#include<algorithm>'。
*/